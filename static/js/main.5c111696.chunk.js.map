{"version":3,"sources":["hooks/useLocalStorage.js","constants.js","components/StatusBadge.js","components/TodoFilters.js","components/TodoEdit.js","components/TodoListItem.js","components/TodoCreate.js","components/TodoList.js","components/App.js","serviceWorker.js","index.js"],"names":["useLocalStorage","key","defaultValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","state","setState","newValue","valueToUpdate","Function","setItem","stringify","statuses","MyBadge","styled","Badge","props","onClick","colors","Pending","Completed","StatusBadge","status","color","rest","TodoFilters","filters","setFilters","tags","filterStatus","filterTags","tag","isSelected","type","val","className","undefined","map","s","value","MyLabel","required","children","Label","TodoEdit","saveTodo","todo","toggle","autosave","setAutosave","recordLoaded","setRecordLoaded","titleInput","useRef","throttledSave","throttle","newState","dismiss","useEffect","current","focus","updateTodo","field","handleInputChange","e","target","name","Modal","isOpen","ModalHeader","title","ModalBody","Form","onSubmit","preventDefault","FormGroup","for","Input","id","autoFocus","onChange","innerRef","description","Row","Col","selected","dueDate","date","minDate","Date","isMulti","options","Button","check","checked","ClickableListItem","ListGroupItem","TodoListItem","onRemove","onEdit","moment","fromNow","stopPropagation","close","FormWrapper","TodoCreate","createTodo","setTitle","InputGroup","placeholder","InputGroupAddon","addonType","BlankState","TodoList","todos","removeTodo","editTodo","TodoListContent","length","index","ListGroup","Wrapper","Container","filterTodos","filter","find","t","App","rawTodos","setTodos","todoToEdit","setTodoToEdit","parseTodos","Set","forEach","add","values","label","distinctTags","onSave","newTodo","todoToAdd","uuidv4","indexToRemove","_","indexToEdit","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5c111696.chunk.js","sourcesContent":["import { useState } from 'react';\n\nfunction useLocalStorage(key, defaultValue) {\n  // State to store value\n  const [state, setState] = useState(() => {\n    try {\n      // Get value from local storage\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : defaultValue;\n    } catch (error) {\n      console.error(error);\n      return defaultValue;\n    }\n  });\n\n  // Create setter function\n  const setValue = (newValue) => {\n    try {\n      // Copy API from useState to allow function to set value\n      const valueToUpdate =\n        newValue instanceof Function ? newValue(state) : newValue;\n      // Store in local state\n      setState(valueToUpdate);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToUpdate));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return [state, setValue];\n}\n\nexport default useLocalStorage;\n","export const statuses = ['Pending', 'In Progress', 'Completed'];\n","import React from 'react';\nimport { Badge } from 'reactstrap';\nimport styled from 'styled-components';\n\nconst MyBadge = styled(Badge)`\n  cursor: ${(props) => (props.onClick ? 'pointer' : 'inherit')};\n`;\n\nconst colors = {\n  Pending: 'info',\n  'In Progress': 'primary',\n  Completed: 'success',\n};\n\nexport default function StatusBadge({ status, color, ...rest }) {\n  return (\n    <MyBadge color={color || colors[status]} {...rest}>\n      {status}\n    </MyBadge>\n  );\n}\n","import React from 'react';\n\nimport { statuses } from '../constants';\n\nimport StatusBadge from './StatusBadge';\n\nexport default function TodoFilters({ filters, setFilters, tags }) {\n  const filterStatus = (status) =>\n    setFilters({\n      ...filters,\n      status,\n    });\n\n  const filterTags = (tag) => {\n    setFilters({\n      ...filters,\n      tag,\n    });\n  };\n\n  const isSelected = (type, val) => !filters[type] || filters[type] === val;\n\n  return (\n    <div>\n      <div className=\"my-3\">\n        Status:{' '}\n        <StatusBadge\n          className=\"mr-2\"\n          color=\"light\"\n          status={'All'}\n          onClick={() => filterStatus(undefined)}\n        />\n        {statuses.map((s) => (\n          <StatusBadge\n            className=\"mr-2\"\n            status={s}\n            color={isSelected('status', s) ? undefined : 'light'}\n            onClick={() => filterStatus(s)}\n          />\n        ))}\n      </div>\n      <div className=\"my-3\">\n        Tags:{' '}\n        <StatusBadge\n          className=\"mr-2\"\n          color=\"light\"\n          status={'All'}\n          onClick={() => filterTags(undefined)}\n        />\n        {tags.map(({ value }) => (\n          <StatusBadge\n            className=\"mr-2\"\n            status={value}\n            color={isSelected('tag', value) ? undefined : 'light'}\n            onClick={() => filterTags(value)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect, useRef } from 'react';\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Row,\n  Col,\n} from 'reactstrap';\nimport DatePicker from 'react-datepicker';\nimport CreatableSelect from 'react-select/creatable';\nimport throttle from 'lodash.throttle';\n\nimport useLocalStorage from '../hooks/useLocalStorage';\n\nimport { statuses } from '../constants';\n\nconst MyLabel = ({ required = false, children, ...rest }) => (\n  <Label {...rest}>\n    {children}\n    {required && <span className=\"text-danger ml-1\">*</span>}\n  </Label>\n);\n\nexport default function TodoEdit({ saveTodo, todo, toggle, tags }) {\n  const [autosave, setAutosave] = useLocalStorage('cg-autosave', true);\n  const [state, setState] = useState();\n  const [recordLoaded, setRecordLoaded] = useState(false);\n\n  const titleInput = useRef();\n\n  const autosaveDelay = 500; // Only allow saves every N ms\n  const throttledSave = throttle(\n    (newState) => saveTodo(newState, { dismiss: false }),\n    autosaveDelay\n  );\n\n  useEffect(() => {\n    // Set state from todo param\n    if (todo) {\n      setState(todo);\n      setRecordLoaded(false);\n    }\n  }, [todo]);\n\n  useEffect(() => {\n    // Focus on first input the first time state changes\n    if (!recordLoaded && titleInput.current) {\n      titleInput.current.focus();\n      setRecordLoaded(true);\n    }\n  }, [recordLoaded, state]);\n\n  // Helper function to save changes\n  const onSubmit = (e) => {\n    e.preventDefault();\n    saveTodo(state);\n  };\n\n  // Helper function to update state\n  const updateTodo = (field, value) => {\n    const newState = {\n      ...state,\n      [field]: value,\n    };\n    setState(newState);\n    if (autosave) {\n      throttledSave(newState);\n    }\n  };\n  // Helper function to update state from input\n  const handleInputChange = (e) => updateTodo(e.target.name, e.target.value);\n\n  return (\n    <Modal isOpen={!!todo} toggle={toggle}>\n      <ModalHeader toggle={toggle}>{state?.title || 'Edit Todo'}</ModalHeader>\n      <ModalBody>\n        <Form onSubmit={onSubmit}>\n          <FormGroup>\n            <MyLabel required for=\"form-title\">\n              Title\n            </MyLabel>\n            <Input\n              id=\"form-title\"\n              name=\"title\"\n              autoFocus\n              onChange={handleInputChange}\n              value={state?.title}\n              innerRef={titleInput}\n              required\n            />\n          </FormGroup>\n          <FormGroup>\n            <MyLabel for=\"form-description\">Description</MyLabel>\n            <Input\n              type=\"textarea\"\n              name=\"description\"\n              id=\"form-description\"\n              onChange={handleInputChange}\n              value={state?.description}\n            />\n          </FormGroup>\n          <Row>\n            <Col>\n              <FormGroup>\n                <MyLabel required for=\"form-status\">\n                  Status\n                </MyLabel>\n                <Input\n                  id=\"form-status\"\n                  required\n                  type=\"select\"\n                  name=\"status\"\n                  onChange={handleInputChange}\n                  value={state?.status}>\n                  {statuses.map((s) => (\n                    <option key={s}>{s}</option>\n                  ))}\n                </Input>\n              </FormGroup>\n            </Col>\n            <Col>\n              <FormGroup>\n                <MyLabel for=\"form-date\" className=\"d-block\">\n                  Due Date\n                </MyLabel>\n                <DatePicker\n                  selected={state?.dueDate}\n                  onChange={(date) => updateTodo('dueDate', date)}\n                  minDate={new Date()}\n                  className=\"form-control\"\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <FormGroup>\n            <MyLabel for=\"form-tags\" className=\"d-block\">\n              Tags\n            </MyLabel>\n            <CreatableSelect\n              id=\"form-tags\"\n              isMulti\n              onChange={(options) => updateTodo('tags', options)}\n              value={state?.tags}\n              options={tags}\n            />\n          </FormGroup>\n          <Row>\n            <Col>{!autosave && <Button color=\"primary\">Save</Button>}</Col>\n            <Col>\n              <FormGroup check className=\"my-2 text-right\">\n                <Label check>\n                  <Input\n                    type=\"checkbox\"\n                    checked={autosave}\n                    onChange={(e) => setAutosave(e.target.checked)}\n                  />{' '}\n                  Autosave changes?\n                </Label>\n              </FormGroup>\n            </Col>\n          </Row>\n        </Form>\n      </ModalBody>\n    </Modal>\n  );\n}\n","import React from 'react';\nimport { ListGroupItem, Button } from 'reactstrap';\nimport styled from 'styled-components';\nimport moment from 'moment';\n\nimport StatusBadge from './StatusBadge';\n\nconst ClickableListItem = styled(ListGroupItem)`\n  cursor: pointer;\n`;\n\nexport default function TodoListItem({ todo, onRemove, onEdit }) {\n  return (\n    <ClickableListItem key={todo.id} onClick={onEdit}>\n      {todo.title} <StatusBadge status={todo.status} />{' '}\n      {todo.dueDate && `due ${moment(todo.dueDate).fromNow()}`}\n      <Button\n        onClick={(e) => {\n          e.stopPropagation();\n          onRemove();\n        }}\n        close\n      />\n    </ClickableListItem>\n  );\n}\n","import React, { useState } from 'react';\nimport {\n  Button,\n  InputGroup,\n  InputGroupAddon,\n  Input,\n  Form,\n  ListGroupItem,\n} from 'reactstrap';\nimport styled from 'styled-components';\n\nconst FormWrapper = styled(ListGroupItem)`\n  padding: 0.5rem;\n`;\n\nexport default function TodoCreate({ createTodo }) {\n  const [title, setTitle] = useState('');\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    createTodo({ title, status: 'Pending' });\n    setTitle('');\n  };\n\n  const handleInputChange = (e) => {\n    setTitle(e.target.value);\n  };\n\n  return (\n    <FormWrapper>\n      <Form onSubmit={handleSubmit}>\n        <InputGroup>\n          <Input\n            id=\"form-title\"\n            name=\"title\"\n            className=\"no-border\"\n            onChange={handleInputChange}\n            value={title}\n            placeholder=\"New task\"\n            required\n          />\n          <InputGroupAddon addonType=\"append\">\n            <Button color=\"link\">+ Add Task</Button>\n          </InputGroupAddon>\n        </InputGroup>\n      </Form>\n    </FormWrapper>\n  );\n}\n","import React from 'react';\nimport { ListGroup, ListGroupItem } from 'reactstrap';\n\nimport TodoListItem from './TodoListItem';\nimport TodoCreate from './TodoCreate';\n\nconst BlankState = () => (\n  <ListGroupItem className=\"text-muted py-3\">\n    Create your first todo below!\n  </ListGroupItem>\n);\n\nexport default function TodoList({\n  createTodo,\n  todos = [],\n  removeTodo,\n  editTodo,\n}) {\n  const TodoListContent = () =>\n    !todos || todos.length === 0 ? (\n      <BlankState />\n    ) : (\n      todos.map((todo, index) => (\n        <TodoListItem\n          key={todo.id}\n          todo={todo}\n          onEdit={() => editTodo(index)}\n          onRemove={() => removeTodo(index)}\n        />\n      ))\n    );\n\n  return (\n    <ListGroup>\n      <TodoListContent />\n      <TodoCreate createTodo={createTodo} />\n    </ListGroup>\n  );\n}\n","import React, { useState } from 'react';\nimport { Container } from 'reactstrap';\nimport { v4 as uuidv4 } from 'uuid';\nimport styled from 'styled-components';\n\nimport useLocalStorage from '../hooks/useLocalStorage';\n\nimport TodoFilters from './TodoFilters';\nimport TodoEdit from './TodoEdit';\nimport TodoList from './TodoList';\n\nconst Wrapper = styled(Container)`\n  max-width: 600px;\n`;\n\nconst distinctTags = (todos) => {\n  const tags = new Set();\n  todos.forEach((t) => {\n    if (t && t.tags) {\n      t.tags.forEach((tag) => tags.add(tag.value));\n    }\n  });\n  return [...tags.values()].map((value) => ({ value, label: value }));\n};\n\nconst parseTodos = (todos) =>\n  todos.map((todo) => ({\n    ...todo,\n    dueDate: todo.dueDate ? new Date(todo.dueDate) : undefined,\n  }));\n\nconst filterTodos = (todos, filters = {}) =>\n  todos.filter((todo) => {\n    if (filters.status && filters.status !== todo.status) return false;\n    if (filters.tag && !(todo.tags || []).find((t) => t.value === filters.tag))\n      return false;\n    return true;\n  });\n\nfunction App() {\n  const [rawTodos, setTodos] = useLocalStorage('cg-todos', []);\n  const [todoToEdit, setTodoToEdit] = useState();\n  const [filters, setFilters] = useState({});\n\n  const todos = parseTodos(rawTodos);\n  const tags = distinctTags(todos);\n\n  // Functions to remove and edit todos\n  const onRemove = (indexToRemove) =>\n    setTodos(todos.filter((_, index) => index !== indexToRemove));\n  const onStartEdit = (indexToEdit) => setTodoToEdit(todos[indexToEdit]);\n\n  // Save new todo\n  const onSave = (newTodo, { dismiss = true } = {}) => {\n    if (newTodo && newTodo.id) {\n      // Update existing value\n      setTodos(todos.map((todo) => (todo.id === newTodo.id ? newTodo : todo)));\n      if (dismiss) {\n        setTodoToEdit(undefined);\n      }\n    } else {\n      // Add to the end of the array\n      const todoToAdd = { id: uuidv4(), ...newTodo };\n      setTodos([...todos, todoToAdd]);\n      setTodoToEdit(todoToAdd);\n    }\n  };\n\n  return (\n    <Wrapper>\n      <h1 className=\"text-center my-4\">Todos</h1>\n      <TodoFilters filters={filters} setFilters={setFilters} tags={tags} />\n      <TodoList\n        todos={filterTodos(todos, filters)}\n        createTodo={onSave}\n        removeTodo={onRemove}\n        editTodo={onStartEdit}\n      />\n      <TodoEdit\n        saveTodo={onSave}\n        todo={todoToEdit}\n        toggle={() => setTodoToEdit(undefined)}\n        tags={tags}\n      />\n    </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}